Rocketseat Bootcamp GoStack - Nível 4

------> 12. Arquitetura e testes no Node.js
Nessa etapa, continuaremos o projeto iniciado anteriormente adicionando pontos cruciais
de arquitetura, design patterns e testes automatizados

----> 1. Arquitetura e DDD
--> Introdução
Explica que iremos iniciar uma jornada para desenvolver os sistemas baseado em testes
Toda grande aplicação não é apenas um monte de códigos, também precisamos pensar na
arquitetura, nos testes, na documentação, na organização e principios da organização

--> Conceitos DDD e TDD
Hoje estamos separando os arquivos conforme seus tipos, isso vai nos atrapalhar quando
o sistema se tornar grande, assim teremos que separa por tipo de domínio, qual é a
área de conhecimento dquele módulo ou arquivo como usuários, agedamentos e outros

DDD (Domain Driven Desing) e o Scrum são metodologias agil para que assim o time
consigir se organizar e ser agil nas tarefas

Estes dois metodos são diferentes de um TDD (Test Driven Development)

--> Separando em módulos
Antes de iniciar vamos configurar manualmente os icones para as pastas e arquivos
que vamos utilizar durante nível quatro, podemos criar qualquer configuração no
JSON basta saber quais são os icones seu nome

Os modulos tem que ser dividido num formato onde a exclusão de um arquivo não vai
afetar os arquivos dos outros modulos, para os arquivos que são interligados colocamos
eles um pasta informando que os arquivos são compartilhados

--> Camada de Infra
Infra é a parte tecnica da aplicação, as ferramentas que usamos como o Express,
estes itens são aqueles que é decidido em uma reunião com programadores pois precisa
de pessoas que entenda a área

A camada de dominio seria tudo que depende do cliente ou do usuário, um exemplo seria
a criação das regras de negocio pois o foco dela é desenvolvida baseando no que o
cliente pediu/precisa

Com isso devemos separar estes arquivos em pastas para um dia futuro facilitar na
troca de uma ferramenta para outra

--> Configurando Imports
Os arquivos começaram a ficar dentro de muitas pastas, com isso começamos a ter
um problema para realizar importações pois os caminhos ficaram muito grande

O Visual Studio Code tem uma funcionalidade de criar atalhos de importaçõe, para
ativar temos que ir no arquivo tsconfig.json, depois definir o caminho base e por
último os nomes dos atalhos e seu caminho
	"baseUrl": "./src",
	"paths": {
		"@modules/*": ["modules/*"],
		"@config/*": ["conig/*"],
		"@shared/*": ["shared/*"],
	},

Para os demais itens entenderem o atalho devemos usar esta dependência
	yarn add tsconfig-paths -D

--> Liskov Substitution Principle
Devemos definir quais metodos os repositórios iram utilizar criando regras para saber
se depois de trocar de dependência tudo continuara funcionando

Quando tivermos um arquivo onde sua única responsabilidade for retornar uma interface
iremos renomear o arquivo para começar com a letra I em maiúscula

Oque fizemos nesta é uma das etapas do SOLID como o L - Liskov Substitution Principle
Ele indica que o nosso service vai depender somente de um repositorio

--> Reescrevendo Repositórios
Os DTOS servem para definir os formatos dos dados nescessário para criar um agendamento

--> Dependency Inversion Principle
Nesta aula iremos aplicar a letra D do SOLID que seguinifica dependency inversion

Que é a inversão de dependência onde invez do service ter que saber com qual
repositorio ele está lidando, iremos fazer com que o arquivo que vai utilizar a classe
informe qual repositorio será nescessário, neste exemplo usaremos um constructor

Este metodo é bom utilizar somente em dependências, as entidades não

--> Refatorando módulo de usuários
Nesta aula iremos usar os mesmo metodos da aula anterior mais nesta vez para os
arquivos que envolvem os usuários

--> Injeção de dependências
A injeção tonar o comando abaixo automatico, assim não vamos mais precisar passar ele
manualmente como parametro das dependências
	constructor(private agendamentoRepositorio: AgendamentoRepositorioInterface) {}

Para tornar isso possivel temos que utilizar a lib da Microsoft TSYRINGE
	yarn add tsyringe

Ao utilizar este metodo também estaremos criando um container onde vai ser ele que vai
controlar todas as dependências, este arquivo vai ficar neste local
	src/shared/container/index.ts
