Rocketseat Bootcamp GoStack - Nível 2

------> 8. Iniciando back-end do app
Nessa etapa vamos continuar os aprendizados com Node.js aproveitando o projeto
desenvolvido até agora para começar a trabalhar com conceitos de banco de dados,
autenticação, autorização, etc.

----> 1. Banco de dados
--> Estratégias de abstração
Para trabalhar com banco de dados pricisamos lidar com o drive nativo da linguagem
gerando queries, para isso temos dependencias que facilita a criação

O Knex.js utiliza JavaScript e depois ele converte para SQL
O Object Relational Mapping (ORM) é o metodo mais facil para utilizar queries
	Sequelize para JavaScript
	TypeORM para TypeScript

O TypeORM funciona com a unificação do Knex.js tornando eficiente principal na
questão de mudança do tipo de banco de dados

--> Conceitos Docker
Docker serve para controlar os serviços externo da aplicação
Uma das coisas que ele serve é a criação de ambientes isolados (Container)
Os containers expõe portas para conseguir comunicar com eles
Imagens são ferramentas do Docker que podemos colocar dentro dos containers
E o container é a instancia de uma imagem
Docker Registry é onde fica salvo as imagens
Dockerfile premite nos criar imagens

--> Instalando Docker
Existe um arquivo mostrando como funciona o instalamento
Depois de instalar é nescessário executar ele e logar, isso se for a versão desktop

--> Criando container do banco
Para verificar todos comandos de postgres temos o site abaixo
	https://hub.docker.com/_/postgres

Para verificar se uma porta está sendo utilizada temos dois comandos abaixo para o Windows
Verifica uma porta expeficica, se tiver direcionada vai aparecer o programa que esta utilizando
	netstat -ano | findstr PORTA

Mostra todas portas em utilização
	netstat -o -a -b

Para criar a instancia devemos utilizar o comando abaixo
	docker run --name NOME -e POSTGRES_USER=LOGIN POSTGRES_PASSWORD=SENHA -p PORTA:PORTA -d IMAGEM
	docker run --name gostack_postgres -e POSTGRES_PASSWORD=docker -p 5432:5432 -d postgres

A segunda porta precisa ser 5432 pois está é a que o Docker utiliza, já a primeira será
a porta que o sistema utiliza onde para está podemos escolher qual usar

Para listar todos bancos de dados ou somente o ativo temos os comandos abaixo
	docker ps -a
	docker ps

Para buscar os logs de alteração, para iniciar ou parar temos os comandos abaixo
	docker logs ID ou NOME
	docker start ID ou NOME
	docker stop ID ou NOME

Para acessar o postgres (Banco de dados) temos o programa DBeaver

Para adicionar uma conexão clicamos no símbolo de tomada e adiconar,
estolhemos o tipo do banco de dados (PostgreSQL), informar a porta, nome da database,
o username e a senha, por último em PostgreSQL ativamos Show all databases

--> Configurando TypeORM
Primeiro de tudo temos que instalar o TypeORM
	yarn add typeorm

Para poder utilizar temos que realizar as configurações basicas
O site mostra todas as configurações possiveis
	https://typeorm.io/

As configurações devem ser salvas no seguinte arquivo
	ormconfig.json

Depois de configurar temos que instalar o drive do danco de dados PostgreSQL
	yarn add pg

--> Criando tabela de agendamentos
As migrations servem para criar ou editar um banco de dados gerando um histórico

Antes de criar uma migration temos que informar nas configurações o caminho de onde as
migrations estão salvas e falar que o diretório está no mesmo caminho

Para criar migrations no tipo TypeScript usamos o comando abaixo (Atalho: typeorm)
	yarn ts-node-dev ./node_modules/typeorm/cli.js

Para criar uma migration utilizamos o seguinte comando
	yarn typeorm migration:create -n NOME-NO-PLURAL

Uma migration possui dois metodos de execução
	up serve para definir oque queremos fazer
	down é utilizado desfazer tarefas do up

Devemos criar o down em sentido contrário do up

Os comandos abaixo que server para criar, excluir e mostrar um status das migrations
	yarn typeorm migration:run
	yarn typeorm migration:revert
	yarn typeorm migration:show

Não podemos realizar alterações de uma migration que já foi divulgado para a equipe
Com isso devemos criar uma outra migration para alterar oque precisa

--> Criando model de agendamento
Para salvar os dados no banco de dados devemos vincula-lo a uma classe modelo
Um metodo fácil de utilizar para o vinculo é usando o Decorator e o Entity, para isso
devemos ativar os itens abaixo no tsconfig.json e importar o Entity do TypeORM
	"experimentalDecorators": true
  "emitDecoratorMetadata": true

Precisamos também informar dentro do model oque vai ser coluna e propriedade

Também importamos o Entity do TypeORM para usar junto o Decorator do TypeScript,
ele dever ser usado sempre na linha de cima do item desejado
	@Entity('NOME-DA-TABELA')
	class NOME-DA-CLASSE {
		...
	}

Na utilização de JavaScript deve usar o Entity na exportação
	export default Entity(NOME-DA-CLASSE);

O TypeORM inicializa uma variavel ao executar mais o IDE não sabe disso, para resolver
este problema devemos ativar está configuração no tsconfig.json
	"strictPropertyInitialization": false

--> Repositório do TypeORM
O TypeORM possui um repositório com funções essenciais como salvar, buscar e outras

Uma Promise demora um pouco para finalizar sua execução, com isso devemos usar alguns
comandos para falar que deve esperar ela finalizar para continuar
	async = Usamos na função
	await = Usamos no repositório

Também devemos informar qual será o tipo do resultado desta Promise

Para um funcionamento correto do Decorator temos que instalar a dependencia abaixo
	yarn add reflect-metadata

Nas configurações ormconfig.json devemos informar onde estão as entidades

----> 2. Cadastro de usuários
--> Model e migration de usuários
Para criar a tabela de usuários usamos o seguinte comando para assim criar a migration
que será responsavel pela criação, também mudaremos o nome da criado de agendamentos
	yarn typeorm migration:create -n CriarTabelaUsuario
	yarn typeorm migration:create -n CriarTabelaAgendamento

A propriedade isNullable possui o padrão de não permitir campos em banco
Devemos definir o valor de default para todos dados alimentado pelo sistema

É altamente recomendado criar as duas colunas abaixo
	created_at: Ou criação que registrará o horário de data de quando o dado foi criado
	updated_at: Ou alteração que vai salvar o quando foi realizado a última alteração
