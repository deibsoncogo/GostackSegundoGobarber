Rocketseat Bootcamp GoStack - Nível 3

------> 10. Iniciando front-end web
Durante esse módulo criaremos a versão web da aplicação GoBarber que será utilizada
pelos usuários que prestam serviços dentro da aplicação

----> 1. Estrutura das páginas
--> Configurando Estrutura
Neste momento iremos focar na criação do frontend
Para criar os arquivos base usamos o seguinte comando
	create-react-app nivel3-10 --template=typescript

Alguns arquivos podemos excluir deixando somente estes
  App.tsx
  index.tsx
	react-app-env.d.ts
	setupTests.ts
  index.html
	robots.txt

Primeiro instalamos a extensão do EditorConfig e depois criamos o arquivo de
configuração do EditorConfig clicando o botão direito
  root = true

  [*]
  indent_style = tab
  indent_size = 2
  charset = utf-8
  trim_trailing_whitespace = true
  insert_final_newline = true
  end_of_line = crlf

Está configuração serve para o ReactJS, para o React Native é diferente
Agora devemos instalar a extensão e a dependência como desenvolvedor do Eslint
  yarn add eslint@6.8.0 -D

Atenção a versão mais recente do Eslint está gerando conflitos

Temos que remover a configuração abaixo do arquivo package.json
  "eslintConfig": {
    "extends": "react-app"
  },

Para criar o arquivo de configuração do Eslint usamos o comando abaixo
  yarn eslint --init

Respondemos as perguntas e depois instalamos as dependências que precisaremos
  ? How would you like to use ESLint? To check syntax, find problems, and enforce code style
	? What type of modules does your project use? JavaScript modules (import/export)
	? Which framework does your project use? React
	? Does your project use TypeScript? Yes
	? Where does your code run? Browser
	? How would you like to define a style for your project? Use a popular style guide
	? Which style guide do you want to follow? Airbnb: https://github.com/airbnb/javascript
	? What format do you want your config file to be in? JSON

Depois de responder as perguntas acima teremos várias dependências para instalar
  yarn add eslint-plugin-react@^7.20.0 @typescript-eslint/eslint-plugin@latest eslint-config-airbnb@latest eslint-plugin-import@^2.21.2 eslint-plugin-jsx-a11y@^6.3.0 eslint-plugin-react-hooks@^2.3.0 @typescript-eslint/parser@latest -D

Criamos o arquivo .eslintignore para o Eslint ignorar os arquivos listado
	node_modules
	build
	dist

Faz o React ler e entender os arquivos TypeScript
  yarn add eslint-import-resolver-typescript -D

Agora adicionamos as configurações abaixo no arquivo .eslint.json
  "extends": [
		"plugin:@typescript-eslint/recommended"
  ],
	"plugins": [
		"react-hooks"
	],
  "rules": {
		"react-hooks/rules-of-hooks": "error",
		"react-hooks/exhaustive-deps": "warn",
		"react/jsx-filename-extension": [1, { "extensions": [".tsx"] }],
		"import/prefer-default-export": "off",
		"import/extensions": [
			"error",
			"ignorePackages",
			{
				"ts": "never",
				"tsx": "never"
			}
		]
	},
	"settings": {
		"import/resolver": {
			"typescript": {}
		}
	}

Temos que instalar as seguintes dependências para utilizar o Prettier
  yarn add prettier eslint-config-prettier eslint-plugin-prettier -D

Agora devemos adicionar as seguintes configurações no arquivo .eslintrc.json
  "extends": [
  	"prettier/@typescript-eslint",
		"plugin:prettier/recommended"
  ],
  "plugins": [
    "prettier"
  ],
  "rules": {
    "prettier/prettier": "error"
  },

Também criamos o arquivo prettier.config.js para poder configurar o Prettier
  module.exports = {
    singleQuote: true,
    trailingComma: 'all',
    arrowParens: 'avoid',
    printWidth: 91,
  }

--> Estilos globais
O melhor metodo de criar as estilisações é usando a dependência abaixo
	yarn add styled-components
	yarn add @types/styled-components -D

--> Página de login
Agora iremos criar todos os itens da página de login
Para definir os icones usamos a dependência abaixo
	yarn add react-icons

E para lidar com cores iremos usar novamente esta dependência
	yarn add polished

Agora consulte o arquivo abaixo para verificar as configurações de estilo
	src/pages/login/styles.ts

--> Isolando componentes
Um isolamento de componente é a criação de um programa que fica escondida do resto
do programa principal, um exemplo é a crição de um estilo para todos os botões

Estas duas regras são desnessesárias quando utilisamos TypeScript
	"react/jsx-props-no-spreading": "off"
	"react/prop-types": "off"

--> Página de cadastro
Nesta aula simplismente duplicamos a página de login e realizamos algumas alterações
para transformar ela na página de cadastro de usuários ou cabelereiro

--> Utilizando Unform
O unform serve para trabalhar com formulário de uma forma dinámica

Para manipular os dados temos a opção já utilizaso até o momento com as bibliotecas
de useState e useEffect, mais como eles geram alto gasto de desenpenho do servidor
iremos usar as bibliotecas destas dependências
	yarn add @unform/core @unform/web

Temos que informar quais campos a biblioteca deve monitorar para poder criar um registro
Para isso temos o hook abaixo que recebe 4 itens importante
	import { useField } from '@unform/core'
		const { fieldName, defaultValue, error, registerField } = useField(nome);

--> Usabilidade do input
Aqui iremos aplicar alguns comando para trabalhar com a estilisação de um campo para
quando ele é selecionado ou deselecionado, usando os seguinte comandos
	onFocus={}
	onBlur={}

O comando abaixo serve para criar funções que não serão reiniciadas todas vezes
	import { useCallback } from 'react'

--> Validando cadastro
Para realizar validações (Regras de negócio) temos a dependência Yup
	yarn add yup
	yarn add @types/yup -D

om o comando abaixo conseguimos importar todos os do Yup por uma variável
	import * as Yup from 'yup';

--> Exibindo erros no Input
A dependência Unform facilita a ultilização de estilisação voltado para erros mais suas
tipagens não aparecem na IDE, para corrigir usamos esta importação
	import { FormHandles } from '@unform/core';

Nesta aula utilziamos pela primeira vez o metodo de arquivos utilitario

--> Criando tooltip de erros
Tooltip é um menu flutuante onde iremos usar para mostrar a descrição do erro
Existe estilos de css ja feitos na internet, eles são bem elaborados

--> Validação de login
Nesta aula iremos fazer as mesma coisa aplicada na página de cadastro como validação
de erros, estilização e outros

----> 2. Autenticação
--> Habilitando CORS na API
Iremos criar o vinculo do nosso frontend web com seu backend
Para isso usamos a dependência abaixo
	yarn add cors

Depois de importar devemos ativar a utilização dele, podemos definir qual endereço pode
acessar o backend como abaixo
	import cors from 'cors';

Com os comandos abaixo defenimos qual endereço pode acessar o backend
	app.use(
		cors({
			origin: 'http://localhost:3333',
		}),
	);

Não sei o porque mais o Cors não aceita comentarios entre os comandos

--> API de Contexto
O termo de API de contexto é um conjunto de variáveis global com registrições, as
retrições que quero dizer é que conseguimos definir quem vai receber estas informações

Com está metodologia iremos criar o arquivo de autenticação do usuário, para criar
usaremos uma funcionalidade do React como abaixo
	createContext

--> Login pelo Contexto
Finalisamos os itens basicos para o login
E criamos a conexão com o backend
	yarn add axios

--> Mantendo usuário no storage
O token será salvo no local storage invéz de um cooker
Aqui aprendemos a jogar as informações salva no local storage dentro do programa
toda vez que o usuário atualizar a página

--> Criando hook useAuth
Aplicamos a utilização de hook para realizar a autenticação do usuário

--> Logout da aplicação
Nesta aula executamos a deslogagem do usuário apagando as informações de login
dentro do localStorage do navegador

----> 3. Mensagens de toast
--> Estrutura de Toasts
Os toasts são mensagens de notificação que aparecem em algum conto da tela
Aplicamos estilizações utilizando regras e propriedades dos campos

--> Criando hook de toast
Agora criamos um hook para faciliatar mais a utilização de toasts
Também criamos um arquivo mestre para resumir as importações de hooks no arquivo
mestre da nossa API, para a improtação de um pasta funcionar devemos ter dentro dela
um arquivo index idependente de sua extensão (A extensão tem que ser válida)
	import AppProvider from './hooks';
