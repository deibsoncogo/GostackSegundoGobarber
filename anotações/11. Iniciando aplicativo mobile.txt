Rocketseat Bootcamp GoStack - Nível 3

------> 11. Iniciando aplicativo mobile
Nesse módulo criaremos a versão mobile do GoBarber que será utilizada pelos usuários
para agendar serviços dentro da plataforma

----> 1. Estrutura e padrões
--> Configurando estrutura
A equipe da Rocketseat não recomenda ter o React Native CLi instalado como globalmente
	yarn global remove react-native-cli

Para criar um novo projeto usaremos o comando abaixo, o nome da pasta não pode conter
acentos e símbolos, ele também ira realizar diversas configurações essenciais
	yarn react-native init appgobarber --template react-native-template-typescript

Para verificar se o celular está conectado temos o comando abaixo
	adb devices

E para executar o programa temos este comando
	yarn start

--> Padrões de Projeto com Eslint, Prettier e Editor Config
Primeiro instalamos a extensão do EditorConfig e depois criamos o arquivo de
configuração do EditorConfig clicando o botão direito
  root = true

  [*]
  indent_style = tab
  indent_size = 2
  charset = utf-8
  trim_trailing_whitespace = true
  insert_final_newline = true
  end_of_line = crlf

Agora iniciamos as configurações para o Eslint funcionar com o React Native Cli
	yarn add eslint@6.8.0 -D

Depois de instalar o Eslint usamos o comando abaixo para saber de quais dependências
iremos precisar para finalizar as configurações
	yarn eslint --init

	? How would you like to use ESLint? To check syntax, find problems, and enforce code style
	? What type of modules does your project use? JavaScript modules (import/export)
	? Which framework does your project use? React
	? Does your project use TypeScript? Yes
	? Where does your code run?
	? How would you like to define a style for your project? Use a popular style guide
	? Which style guide do you want to follow? Airbnb: https://github.com/airbnb/javascript
	? What format do you want your config file to be in? JSON

	yarn add eslint-plugin-react@^7.20.0 @typescript-eslint/eslint-plugin@latest eslint-config-airbnb@latest eslint-plugin-import@^2.21.2 eslint-plugin-jsx-a11y@^6.3.0 eslint-plugin-react-hooks@^2.3.0 @typescript-eslint/parser@latest -D

Agora criamos o arquivo abaixo para criar exceções de verificações
	.eslintignore

	node_modules
	build
	dist

Agora adicionamos as configurações abaixo no arquivo .eslint.json
	{
		"extends": [
			"plugin:@typescript-eslint/recommended"
		],
		"globals": {
			"__DEV__": "readonly"
		},
		"plugins": [
			"react-hooks"
		],
		"rules": {
			"react-hooks/rules-of-hooks": "error",
			"react-hooks/exhaustive-deps": "warn",
			"react/jsx-filename-extension": [1, { "extensions": [".tsx"] }],
			"import/prefer-default-export": "off",
			"import/extensions": [
				"error",
				"ignorePackages",
				{
					"ts": "never",
					"tsx": "never"
				}
			]
		},
		"settings": {
			"import/resolver": {
				"typescript": {}
			}
		}
	}

Faz o React ler e entender os arquivos TypeScript
  yarn add eslint-import-resolver-typescript -D

Temos que instalar as seguintes dependências para utilizar o Prettier
  yarn add prettier eslint-config-prettier eslint-plugin-prettier -D

Agora devemos adicionar as seguintes configurações no arquivo .eslintrc.json
  "extends": [
  	"prettier/@typescript-eslint",
		"plugin:prettier/recommended"
  ],
  "plugins": [
    "prettier"
  ],
  "rules": {
    "prettier/prettier": "error"
  },

E por último criamos o arquivo abaixo para adicionar as seguintes configurações
	prettier.config.js

  module.exports = {
    singleQuote: true,
    trailingComma: 'all',
    arrowParens: 'avoid',
    printWidth: 91,
  }

--> Configurando StatusBar
Para executar o servidor devemos execar os seguintes comando na seguencia
	yarn start
		yarn react-native start
	yarn android
		yarn react-native run-android

Nesta aula aprendemos também como basicos da dependência abaixo
	StatusBar

	Cor branca dos icones do topo: barStyle="light-content"
	Cor de fundo do topo: backgroundColor="#312e38"

--> Configurando navegação
A dependência de estilação abaixo também serve para a verção mobile, mais temos que
ativar o modo React Native na importação do mesmo
	yarn add styled-components
	yarn add @types/styled-components -D

	import Styled from 'styled-components/native'

Para lidar com as rotas iremos usar a dependência React Navigation
	yarn add @react-navigation/native

Depois de instalar a dependência temos que realizar alguma configurações onde temos
salvo doque fazer no site abaixo
	https://reactnavigation.org/docs/getting-started/

A primeira configuração e instalar também estas dependências pois não usamos Expo
	yarn add react-native-reanimated react-native-gesture-handler react-native-screens react-native-safe-area-context @react-native-community/masked-view

A segunda para os sitema IOS é dentro da pasta ios executar este comando depois de ter
instalado na maquina o Cocoapods (Gerenciado de diretórios como o Yarn)
	pod install

E para o Android não vamos precisar instalar na de expecial
Para as ambas plataforma devemos realizar a importação a baixo na primeira linha
do primeiro arquivo que ira executar pela API
	import 'react-native-gesture-handler';

Também devemos instalar esta dependência abaixo para lidar com as navegações
	yarn add @react-navigation/stack

Devemos também manter a dependência por volta de todo nosso programa, caso contrário a
navegação não vai funcionar mais ele traz uma estilização pronta e editavel
	import { NavigationContainer } from '@react-navigation/native';
